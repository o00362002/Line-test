{
  "name": "linebot",
  "version": "1.4.1",
  "description": "Node.js SDK for the LINE Messaging API",
  "main": "index.js",
  "files": [
    "index.js",
    "lib/**"
  ],
  "scripts": {
    "start": "node examples/demo.js",
    "pretest": "eslint index.js lib/**/*.js test/**/*.js",
    "test": "mocha --timeout 5000 --exit",
    "lint": "eslint index.js lib/**/*.js test/**/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/boybundit/linebot.git"
  },
  "keywords": [
    "LINE",
    "Messaging",
    "API",
    "chat",
    "bot"
  ],
  "author": {
    "name": "Bundit Jitkongchuen"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/boybundit/linebot/issues"
  },
  "homepage": "https://github.com/boybundit/linebot#readme",
  "dependencies": {
    "body-parser": "^1.18.2",
    "debug": "^3.1.0",
    "node-fetch": "^1.7.3"
  },
  "devDependencies": {
    "eslint": "^4.16.0",
    "mocha": "^5.0.0",
    "nock": "^9.1.6"
  },
  "readme": "# linebot\r\n\r\n  [![NPM Version][npm-image]][npm-url]\r\n  [![NPM Downloads][downloads-image]][downloads-url]\r\n  [![NPM Dependencies][dependencies-image]][dependencies-url]\r\n  [![Build][travis-image]][travis-url]\r\n\r\nü§ñ SDK for the LINE Messaging API for Node.js\r\n- Come with built-in server for quick setup\r\n- Provide convenient addon functions to [event object](#event-object)\r\n\r\n# About LINE Messaging API\r\n\r\nPlease refer to the official API documents for details.\r\n- Developer Documents - https://developers.line.me/en/docs/messaging-api/overview\r\n- API Reference - https://developers.line.me/en/docs/messaging-api/reference\r\n\r\n# Installation\r\n\r\n```bash\r\n$ npm install linebot --save\r\n```\r\n\r\n# Usage\r\n\r\n```js\r\nvar linebot = require('linebot');\r\n\r\nvar bot = linebot({\r\n  channelId: CHANNEL_ID,\r\n  channelSecret: CHANNEL_SECRET,\r\n  channelAccessToken: CHANNEL_ACCESS_TOKEN\r\n});\r\n\r\nbot.on('message', function (event) {\r\n  event.reply(event.message.text).then(function (data) {\r\n    // success\r\n  }).catch(function (error) {\r\n    // error\r\n  });\r\n});\r\n\r\nbot.listen('/linewebhook', 3000);\r\n```\r\n\r\n### Using with your own [Express.js][express-url] server\r\n```js\r\nconst app = express();\r\nconst linebotParser = bot.parser();\r\napp.post('/linewebhook', linebotParser);\r\napp.listen(3000);\r\n```\r\n\r\nSee [`examples`](examples) folder for more examples.\r\n\r\n# API\r\n\r\n## LineBot object\r\n\r\n### linebot(config)\r\nCreate LineBot instance with specified configuration.\r\n```js\r\nvar bot = linebot({\r\n  channelId: CHANNEL_ID,\r\n  channelSecret: CHANNEL_SECRET,\r\n  channelAccessToken: CHANNEL_ACCESS_TOKEN,\r\n  verify: true // Verify 'X-Line-Signature' header (default=true)\r\n});\r\n```\r\n\r\n### LineBot.listen(webHookPath, port, callback)\r\n\r\nStart built-in http server on the specified `port`,\r\nand accept POST request callback on the specified `webHookPath`.\r\n\r\nThis method is provided for convenience.\r\nYou can write you own server and use `verify` and `parse` methods to process webhook events.\r\nSee [`examples/echo-express-long.js`](examples/echo-express-long.js) for example.\r\n\r\n### LineBot.parser()\r\n\r\nCreate [Express.js][express-url] middleware to parse the request.\r\n\r\nThe parser assumes that the request body has never been parsed by any body parser before,\r\nso it must be placed BEFORE any generic body parser e.g. `app.use(bodyParser.json());`\r\n\r\n### LineBot.verify(rawBody, signature)\r\n\r\nVerify `X-Line-Signature` header.\r\n\r\n### LineBot.parse(body)\r\n\r\nProcess incoming webhook request, and raise an event.\r\n\r\n### LineBot.on(eventType, eventHandler)\r\n\r\nRaised when a [Webhook event][webhook-event-url] is received.\r\n```js\r\nbot.on('message',  function (event) { });\r\nbot.on('follow',   function (event) { });\r\nbot.on('unfollow', function (event) { });\r\nbot.on('join',     function (event) { });\r\nbot.on('leave',    function (event) { });\r\nbot.on('postback', function (event) { });\r\nbot.on('beacon',   function (event) { });\r\n```\r\n\r\n### LineBot.reply(replyToken, message)\r\n\r\nReply a message.\r\n\r\nSee: [Event.reply(message)](#eventreplymessage)\r\n\r\n### LineBot.push(to, message)\r\n\r\nSend push message.\r\n\r\n`to` is a userId, or an array of userId.\r\nA userId can be saved from `event.source.userId`\r\nwhen added as a friend (follow event), or during the chat (message event).\r\n\r\n`message` can be a string, an array of string,\r\na [Send message][send-message-url] object,\r\nor an array of [Send message][send-message-url] objects.\r\n\r\n### LineBot.multicast(to, message)\r\n\r\nSend push message to multiple users (Max: 150 users).\r\nThis is more efficient than `push` as it will make api call only once.\r\n\r\n`to` is an array of userId.\r\n\r\n`message` can be a string, an array of string,\r\na [Send message][send-message-url] object,\r\nor an array of [Send message][send-message-url] objects.\r\n\r\n### LineBot.getMessageContent(messageId)\r\n\r\nGet image, video, and audio data sent by users as a [Buffer][buffer-url] object.\r\n\r\nSee: [Event.message.content()](#eventmessagecontent)\r\n\r\n### LineBot.getUserProfile(userId)\r\n\r\nGet user profile information of the user.\r\n\r\nSee: [Event.source.profile()](#eventsourceprofile)\r\n\r\n### LineBot.getGroupMemberProfile(groupId, userId)\r\n\r\nGet user profile of a member in a group.\r\n\r\n### LineBot.getGroupMember(groupId)\r\n\r\nGet userId of all members in a group.\r\n\r\nSee: [Event.source.member()](#eventsourcemember)\r\n\r\n### LineBot.leaveGroup(groupId)\r\n\r\nLeave a group.\r\n\r\n### LineBot.getRoomMemberProfile(roomId, userId)\r\n\r\nGet user profile of a member in a chat room.\r\n\r\n### LineBot.getRoomMember(roomId)\r\n\r\nGet userId of all members in a chat room.\r\n\r\nSee: [Event.source.member()](#eventsourcemember)\r\n\r\n### LineBot.leaveRoom(roomId)\r\n\r\nLeave a room.\r\n\r\n## Event object\r\n\r\nProvide convenient shorthands to call LineBot's functions\r\nwhich require parameter from a source event object.\r\n\r\n### Event.reply(message)\r\n\r\nRespond to the event.\r\n\r\n`message` can be a string, an array of string,\r\na [Send message][send-message-url] object,\r\nor an array of [Send message][send-message-url] objects.\r\n\r\nReturn a [Promise][promise-url] object from [`node-fetch`][node-fetch-url] module.\r\n\r\nThis is a shorthand for: `LineBot.reply(event.replyToken, message)`\r\n\r\n```js\r\n// reply text message\r\nevent.reply('Hello, world').then(function (data) {\r\n  // success\r\n}).catch(function (error) {\r\n  // error\r\n});\r\n\r\n// reply multiple text messages\r\nevent.reply(['Hello, world 1', 'Hello, world 2']);\r\n\r\n// reply message object\r\nevent.reply({ type: 'text', text: 'Hello, world' });\r\n\r\n// reply multiple message object\r\nevent.reply([\r\n  { type: 'text', text: 'Hello, world 1' },\r\n  { type: 'text', text: 'Hello, world 2' }\r\n]);\r\n\r\nevent.reply({\r\n  type: 'image',\r\n  originalContentUrl: 'https://example.com/original.jpg',\r\n  previewImageUrl: 'https://example.com/preview.jpg'\r\n});\r\n\r\nevent.reply({\r\n  type: 'video',\r\n  originalContentUrl: 'https://example.com/original.mp4',\r\n  previewImageUrl: 'https://example.com/preview.jpg'\r\n});\r\n\r\nevent.reply({\r\n  type: 'audio',\r\n  originalContentUrl: 'https://example.com/original.m4a',\r\n  duration: 240000\r\n});\r\n\r\nevent.reply({\r\n  type: 'location',\r\n  title: 'my location',\r\n  address: '„Äí150-0002 Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫Ê∏ãË∞∑Ôºí‰∏ÅÁõÆÔºíÔºë‚àíÔºë',\r\n  latitude: 35.65910807942215,\r\n  longitude: 139.70372892916203\r\n});\r\n\r\nevent.reply({\r\n  type: 'sticker',\r\n  packageId: '1',\r\n  stickerId: '1'\r\n});\r\n\r\nevent.reply({\r\n  type: 'imagemap',\r\n  baseUrl: 'https://example.com/bot/images/rm001',\r\n  altText: 'this is an imagemap',\r\n  baseSize: { height: 1040, width: 1040 },\r\n  actions: [{\r\n    type: 'uri',\r\n    linkUri: 'https://example.com/',\r\n    area: { x: 0, y: 0, width: 520, height: 1040 }\r\n  }, {\r\n    type: 'message',\r\n    text: 'hello',\r\n    area: { x: 520, y: 0, width: 520, height: 1040 }\r\n  }]\r\n});\r\n\r\nevent.reply({\r\n  type: 'template',\r\n  altText: 'this is a buttons template',\r\n  template: {\r\n    type: 'buttons',\r\n    thumbnailImageUrl: 'https://example.com/bot/images/image.jpg',\r\n    title: 'Menu',\r\n    text: 'Please select',\r\n    actions: [{\r\n      type: 'postback',\r\n      label: 'Buy',\r\n      data: 'action=buy&itemid=123'\r\n    }, {\r\n      type: 'postback',\r\n      label: 'Add to cart',\r\n      data: 'action=add&itemid=123'\r\n    }, {\r\n      type: 'uri',\r\n      label: 'View detail',\r\n      uri: 'http://example.com/page/123'\r\n    }]\r\n  }\r\n});\r\n\r\nevent.reply({\r\n  type: 'template',\r\n  altText: 'this is a confirm template',\r\n  template: {\r\n    type: 'confirm',\r\n    text: 'Are you sure?',\r\n    actions: [{\r\n      type: 'message',\r\n      label: 'Yes',\r\n      text: 'yes'\r\n    }, {\r\n      type: 'message',\r\n      label: 'No',\r\n      text: 'no'\r\n    }]\r\n  }\r\n});\r\n\r\nevent.reply({\r\n  type: 'template',\r\n  altText: 'this is a carousel template',\r\n  template: {\r\n    type: 'carousel',\r\n    columns: [{\r\n      thumbnailImageUrl: 'https://example.com/bot/images/item1.jpg',\r\n      title: 'this is menu',\r\n      text: 'description',\r\n      actions: [{\r\n        type: 'postback',\r\n        label: 'Buy',\r\n        data: 'action=buy&itemid=111'\r\n      }, {\r\n        type: 'postback',\r\n        label: 'Add to cart',\r\n        data: 'action=add&itemid=111'\r\n      }, {\r\n        type: 'uri',\r\n        label: 'View detail',\r\n        uri: 'http://example.com/page/111'\r\n      }]\r\n    }, {\r\n      thumbnailImageUrl: 'https://example.com/bot/images/item2.jpg',\r\n      title: 'this is menu',\r\n      text: 'description',\r\n      actions: [{\r\n        type: 'postback',\r\n        label: 'Buy',\r\n        data: 'action=buy&itemid=222'\r\n      }, {\r\n        type: 'postback',\r\n        label: 'Add to cart',\r\n        data: 'action=add&itemid=222'\r\n      }, {\r\n        type: 'uri',\r\n        label: 'View detail',\r\n        uri: 'http://example.com/page/222'\r\n      }]\r\n    }]\r\n  }\r\n});\r\n```\r\n\r\n### Event.source.profile()\r\n\r\nGet user profile information of the sender.\r\n\r\nThis is a shorthand for:\r\n  - `LineBot.getUserProfile(event.source.userId)` if it is 1:1 chat\r\n  - `LineBot.getGroupMemberProfile(event.source.groupId, event.source.userId)` if bot is in a group\r\n  - `LineBot.getRoomMemberProfile(event.source.roomId, event.source.userId)` if bot is in a chat room\r\n\r\n```js\r\nevent.source.profile().then(function (profile) {\r\n  event.reply('Hello ' + profile.displayName);\r\n});\r\n```\r\n\r\n### Event.source.member()\r\n\r\nGet userId of all members in a group or a chat room.\r\n\r\nThis is a shorthand for:\r\n  - `LineBot.getGroupMember(event.source.groupId)` if bot is in a group\r\n  - `LineBot.getRoomMember(event.source.roomId)` if bot is in a chat room\r\n\r\n```js\r\nevent.source.member().then(function (member) {\r\n  console.log(member.memberIds);\r\n});\r\n```\r\n\r\n### Event.message.content()\r\n\r\nGet image, video, and audio data sent by users as a [Buffer][buffer-url] object.\r\n\r\nThis is a shorthand for: `LineBot.getMessageContent(event.message.messageId)`\r\n\r\n```js\r\nevent.message.content().then(function (content) {\r\n  console.log(content.toString('base64'));\r\n});\r\n```\r\n\r\n# License\r\n\r\n  [MIT](LICENSE)\r\n\r\n[express-url]: http://expressjs.com\r\n[webhook-event-url]: https://developers.line.me/en/docs/messaging-api/reference/#webhooks\r\n[send-message-url]: https://developers.line.me/en/docs/messaging-api/reference/#message-objects\r\n[promise-url]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n[node-fetch-url]: https://github.com/bitinn/node-fetch\r\n[buffer-url]: https://nodejs.org/api/buffer.html\r\n\r\n[npm-image]: https://img.shields.io/npm/v/linebot.svg\r\n[npm-url]: https://npmjs.org/package/linebot\r\n[dependencies-image]: https://david-dm.org/boybundit/linebot.svg\r\n[dependencies-url]: https://david-dm.org/boybundit/linebot\r\n[downloads-image]: https://img.shields.io/npm/dm/linebot.svg\r\n[downloads-url]: https://npmjs.org/package/linebot\r\n[travis-image]: https://img.shields.io/travis/boybundit/linebot/master.svg\r\n[travis-url]: https://travis-ci.org/boybundit/linebot\r\n",
  "readmeFilename": "README.md",
  "_id": "linebot@1.4.1",
  "_shasum": "3b90e01c40278851a57df5693c0fdf4551001ae3",
  "_from": "linebot@1.4.1",
  "_resolved": "https://registry.npmjs.org/linebot/-/linebot-1.4.1.tgz"
}
